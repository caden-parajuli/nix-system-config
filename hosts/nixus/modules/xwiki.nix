# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, ... }:

let 
  postgres_user = "xwiki";
  postgres_password = "xwiki";
in
{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };

  virtualisation.oci-containers = {
    backend = "docker";
    containers = {

      # Containers
      "xwiki-postgres-db" = {
        image = "postgres:17";
        environment = {
          "POSTGRES_DB" = "xwiki";
          "POSTGRES_INITDB_ARGS" = "--encoding=UTF8 --locale-provider=builtin --locale=C.UTF-8";
          "POSTGRES_PASSWORD" = "${postgres_password}";
          "POSTGRES_ROOT_PASSWORD" = "${postgres_password}";
          "POSTGRES_USER" = "${postgres_user}";
        };
        volumes = [
          "xwiki-setup_postgres-data:/var/lib/postgresql/data:rw"
        ];
        log-driver = "journald";
        extraOptions = [
          "--network-alias=db"
          "--network=xwiki-setup_bridge"
        ];
      };
      "xwiki-postgres-tomcat-web" = {
        image = "xwiki:stable-postgres-tomcat";
        environment = {
          "DB_HOST" = "xwiki-postgres-db";
          "DB_PASSWORD" = "${postgres_password}";
          "DB_USER" = "${postgres_user}";
          "CONTEXT_PATH" = "/xwiki";
        };
        volumes = [
          "xwiki-setup_xwiki-data:/usr/local/xwiki:rw"
        ];
        ports = [
          "127.0.0.1:8080:8080"
        ];
        dependsOn = [
          "xwiki-postgres-db"
        ];
        log-driver = "journald";
        extraOptions = [
          "--network-alias=web"
          "--network=xwiki-setup_bridge"
        ];
      };
    };
  };

  systemd.services."docker-xwiki-postgres-db" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-xwiki-setup_bridge.service"
      "docker-volume-xwiki-setup_postgres-data.service"
    ];
    requires = [
      "docker-network-xwiki-setup_bridge.service"
      "docker-volume-xwiki-setup_postgres-data.service"
    ];
    partOf = [
      "docker-compose-xwiki-setup-root.target"
    ];
    wantedBy = [
      "docker-compose-xwiki-setup-root.target"
    ];
  };
  systemd.services."docker-xwiki-postgres-tomcat-web" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-xwiki-setup_bridge.service"
      "docker-volume-xwiki-setup_xwiki-data.service"
    ];
    requires = [
      "docker-network-xwiki-setup_bridge.service"
      "docker-volume-xwiki-setup_xwiki-data.service"
    ];
    partOf = [
      "docker-compose-xwiki-setup-root.target"
    ];
    wantedBy = [
      "docker-compose-xwiki-setup-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-xwiki-setup_bridge" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f xwiki-setup_bridge";
    };
    script = ''
      docker network inspect xwiki-setup_bridge || docker network create xwiki-setup_bridge --driver=bridge
    '';
    partOf = [ "docker-compose-xwiki-setup-root.target" ];
    wantedBy = [ "docker-compose-xwiki-setup-root.target" ];
  };

  # Volumes
  systemd.services."docker-volume-xwiki-setup_postgres-data" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect xwiki-setup_postgres-data || docker volume create xwiki-setup_postgres-data
    '';
    partOf = [ "docker-compose-xwiki-setup-root.target" ];
    wantedBy = [ "docker-compose-xwiki-setup-root.target" ];
  };
  systemd.services."docker-volume-xwiki-setup_xwiki-data" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect xwiki-setup_xwiki-data || docker volume create xwiki-setup_xwiki-data
    '';
    partOf = [ "docker-compose-xwiki-setup-root.target" ];
    wantedBy = [ "docker-compose-xwiki-setup-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-xwiki-setup-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}

